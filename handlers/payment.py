# handlers/payment.py

import logging
from datetime import datetime, timedelta

from aiogram import types
from aiogram.types import (
    LabeledPrice,
    PreCheckoutQuery,
    SuccessfulPayment,
    Message,
    BufferedInputFile,
)
from aiogram import Router

from config import PAYMENT_PROVIDER_TOKEN
from session import api_session
from keyboards.menu import get_main_menu, get_config_menu, back_menu
from core.database import (
    save_config_id,
    set_expiration_time,
    enable_config,
    get_user,
)

logger = logging.getLogger(__name__)
router = Router()

# –ó–¥–µ—Å—å ‚Äî —Ü–µ–Ω–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–ª—é—á—É
paid_options = {
    "paid_config_1": {"price_rub": 250, "hours": 730},
    "paid_config_3": {"price_rub": 690, "hours": 2190},
    "paid_config_6": {"price_rub": 1300, "hours": 4380},
    "paid_config_12": {"price_rub": 2400, "hours": 8761},
}


async def send_invoice(callback: types.CallbackQuery, payload: str):
    """
    1. –†–∞–∑–±–∏—Ä–∞–µ–º payload = "<tg_id>:<option_key>"
    2. –§–æ—Ä–º–∏—Ä—É–µ–º Invoice –∏ –≤—ã–∑—ã–≤–∞–µ–º answer_invoice (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).
    """
    # –†–∞–∑–±–∏—Ä–∞–µ–º payload
    try:
        tg_id_str, option_key = payload.split(":")
        tg_id = int(tg_id_str)
    except Exception:
        # –ï—Å–ª–∏ payload —Å–ª–æ–º–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º alert
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –µ—Å—Ç—å
    if option_key not in paid_options:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return

    params = paid_options[option_key]
    price_rub = params["price_rub"]
    hours = params["hours"]
    months = int(option_key.split("_")[-1])

    title = f"VPN: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å."
    description = f"–ü–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: {months} –º–µ—Å. ({hours} —á.), {price_rub} ‚ÇΩ"
    amount = price_rub * 100  # —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    prices = [LabeledPrice(label=title, amount=amount)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Invoice (—ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç edit_text –¥–ª—è Invoice)
    try:
        await callback.message.answer_invoice(
            title=title,
            description=description,
            payload=payload,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="vpn_payment"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Invoice: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # –°–Ω–∏–º–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —á–µ–π-—Ç–æ callback –µ—â—ë –æ—Ç–∫—Ä—ã—Ç
    await callback.answer()


@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_q: PreCheckoutQuery):
    """
    –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º ok=True, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤ Telegram.
    """
    await pre_checkout_q.answer(ok=True)


@router.message(lambda m: m.successful_payment is not None)
async def handle_successful_payment(message: Message):
    """
    1) Telegram –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É (SuccessfulPayment).
    2) –†–∞–∑–±–∏—Ä–∞–µ–º payload, —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î.
    3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª .conf (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).
    4) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–º–µ–Ω–∏—Ç–µ–ª—å (–∫–æ—Ç–æ—Ä–æ–µ ¬´üîÑ –§–æ—Ä–º–∏—Ä—É–µ–º —Å—á—ë—Ç‚Ä¶¬ª)
       –Ω–∞ ¬´‚úÖ –í–∞—à –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ‚Ä¶¬ª + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    payment: SuccessfulPayment = message.successful_payment
    payload = payment.invoice_payload  # "<tg_id>:<option_key>"

    try:
        tg_id_str, option_key = payload.split(":")
        tg_id = int(tg_id_str)
    except Exception as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π payload: {payload} ({e})")
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç.–∫. –Ω–µ—Ç callback, –ø–æ—ç—Ç–æ–º—É alert –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    if message.from_user.id != tg_id:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–µ–º—É Telegram ID.")
        return

    if option_key not in paid_options:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return

    params = paid_options[option_key]
    hours = params["hours"]

    try:
        # 1) –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API WireGuard
        create_resp = api_session.request(
            method="POST",
            endpoint="wireguard/client/",
            json={"name": f"{tg_id}_{option_key}"}
        )
        if create_resp.status_code != 200:
            logger.error(f"API create error (paid): {create_resp.text}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # 2) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∏—â–µ–º –Ω–∞—à
        list_resp = api_session.request(method="GET", endpoint="wireguard/client/")
        if list_resp.status_code != 200:
            logger.error(f"API list error (paid): {list_resp.text}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.")
            return

        configs = list_resp.json()
        config_entry = next(
            (c for c in configs if c["name"] == f"{tg_id}_{option_key}"), None
        )
        if not config_entry:
            await message.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        paid_config_id = config_entry["id"]

        # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º config_id –≤ –ë–î
        await save_config_id(tg_id, paid_config_id)

        # 4) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª .conf (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        file_resp = api_session.request(
            method="GET",
            endpoint=f"wireguard/client/{paid_config_id}/configuration"
        )
        if file_resp.status_code != 200:
            logger.error(f"API config file error (paid): {file_resp.text}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return

        config_file = BufferedInputFile(
            file=file_resp.content,
            filename=f"{tg_id}_paid.conf"
        )
        await message.answer_document(config_file)

        # 5) –û—Ç–º–µ—Ç–∏–º –≤ –ë–î expiry –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
        expiration = datetime.utcnow() + timedelta(hours=hours)
        await set_expiration_time(tg_id, expiration)
        await enable_config(tg_id)

        # 6) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–º–µ–Ω–∏—Ç–µ–ª—å (¬´üîÑ –§–æ—Ä–º–∏—Ä—É–µ–º —Å—á—ë—Ç‚Ä¶¬ª),
        #    –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
        new_text = (
            f"‚úÖ –í–∞—à –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ *{expiration.strftime('%Y-%m-%d %H:%M:%S')}* UTC.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await message.edit_text(new_text, parse_mode="Markdown", reply_markup=get_main_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_successful_payment: {e}")
        await message.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")


@router.callback_query(lambda c: c.data == "back_to_config_menu")
async def handle_back_to_config(callback: types.CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –æ–±—Ä–∞—Ç–Ω–æ
    –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ (edit_text).
    """
    tg_id = callback.from_user.id
    user = await get_user(tg_id)

    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ /start.", show_alert=True)
        return

    text = "üîß *–ú–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞:"
    keyboard = get_config_menu()
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()
