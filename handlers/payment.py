# handlers/payment.py

import json
import logging
from datetime import datetime, timedelta

from aiogram import Router, types
from aiogram.types import (
    LabeledPrice,
    PreCheckoutQuery,
    SuccessfulPayment,
    BufferedInputFile,
)

from config import PAYMENT_PROVIDER_TOKEN
from session import api_session
from keyboards.menu import get_main_menu, get_config_menu
from core.database import (
    save_config_id,
    set_expiration_time,
    enable_config,
    get_user,
)

logger = logging.getLogger(__name__)
router = Router()

# –¢–∞—Ä–∏—Ñ—ã: –∫–ª—é—á ‚Üí {"price_rub": <—Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö>, "hours": <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤>}
paid_options = {
    "paid_config_1": {"price_rub": 250, "hours": 730},
    "paid_config_3": {"price_rub": 690, "hours": 2190},
    "paid_config_6": {"price_rub": 1300, "hours": 4380},
    "paid_config_12": {"price_rub": 2400, "hours": 8761},
}


@router.callback_query(lambda c: c.data in paid_options)
async def handle_paid_config_callback(callback: types.CallbackQuery):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´paid_config_X¬ª:
    –°—Ä–∞–∑—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Invoice (–±–µ–∑ ¬´üîÑ –§–æ—Ä–º–∏—Ä—É–µ–º —Å—á—ë—Ç‚Ä¶¬ª).
    """
    tg_id = callback.from_user.id
    option_key = callback.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "paid_config_3"
    # –ú–µ—Å—è—Ü—ã –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Ç–∞–∫:
    months = int(option_key.split("_")[-1])

    # –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º—ã –º–æ–≥–ª–∏ –±—ã –æ–±–Ω–æ–≤–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    # (add_user, add_username), –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.

    payload = f"{tg_id}:{option_key}"
    await send_invoice(callback, payload)


async def send_invoice(callback: types.CallbackQuery, payload: str):
    """
    1) –†–∞–∑–±–∏—Ä–∞–µ–º payload = "<tg_id>:<option_key>"
    2) –§–æ—Ä–º–∏—Ä—É–µ–º Invoice —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —á–µ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ email)
    3) –í—ã–∑—ã–≤–∞–µ–º answer_invoice (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª)
    """
    try:
        tg_id_str, option_key = payload.split(":")
        tg_id = int(tg_id_str)
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)
        return

    if option_key not in paid_options:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return

    params = paid_options[option_key]
    price_rub = params["price_rub"]
    hours = params["hours"]
    months = int(option_key.split("_")[-1])

    title = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å."
    description = f"–ü–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: {months} –º–µ—Å. ({hours} —á.), {price_rub} ‚ÇΩ"
    amount = price_rub * 100
    prices = [LabeledPrice(label=title, amount=amount)]

    # –§–æ—Ä–º–∏—Ä—É–µ–º provider_data (—á–µ–∫) —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º "email"
    receipt_data = {
        "receipt": {
            "items": [
                {
                    "description": title,
                    "quantity": "1.00",
                    "amount": {"value": f"{price_rub:.2f}", "currency": "RUB"},
                    "vat_code": "1"  # 1 = 20% –ù–î–° (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–æ–¥)
                }
            ],
            "email": "",             # Telegram –∑–∞–ø—Ä–æ—Å–∏—Ç e-mail —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "tax_system_code": "1"   # –∫–æ–¥ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
        }
    }
    provider_data_str = json.dumps(receipt_data, ensure_ascii=False)

    try:
        await callback.message.answer_invoice(
            title=title,
            description=description,
            payload=payload,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="vpn_payment",
            need_email=True,
            send_email_to_provider=True,
            provider_data=provider_data_str
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Invoice: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    await callback.answer()


@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_q: PreCheckoutQuery):
    """
    Telegram —à–ª—ë—Ç pre_checkout_query –¥–æ –º–æ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è; –æ—Ç–≤–µ—á–∞–µ–º ok=True.
    """
    await pre_checkout_q.answer(ok=True)


@router.message(lambda m: m.successful_payment is not None)
async def handle_successful_payment(message: types.Message):
    """
    1) Telegram –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É (SuccessfulPayment).
    2) –†–∞–∑–±–∏—Ä–∞–µ–º payload, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è config_id –≤ –ë–î:
       ‚Ä¢ –ï—Å–ª–∏ config_id –Ω–µ—Ç ‚Üí —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º str(tg_id)
                            –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º config_id.
       ‚Ä¢ –ï—Å–ª–∏ config_id —É–∂–µ –µ—Å—Ç—å ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.
    3) –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª .conf (–æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    4) –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º expiration_time:
       ‚Ä¢ –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π expiration_time –µ—â—ë –≤ –±—É–¥—É—â–µ–º ‚Üí old + hours.
       ‚Ä¢ –ò–Ω–∞—á–µ ‚Üí now + hours.
    5) –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ .conf –∫–∏–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.
    """
    payment: SuccessfulPayment = message.successful_payment
    payload = payment.invoice_payload  # "<tg_id>:<option_key>"

    try:
        tg_id_str, option_key = payload.split(":")
        tg_id = int(tg_id_str)
    except Exception as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π payload: {payload} ({e})")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    if message.from_user.id != tg_id:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–µ–º—É Telegram ID.")
        return

    if option_key not in paid_options:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return

    params = paid_options[option_key]
    hours = params["hours"]

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î –Ω–∞–ª–∏—á–∏–µ config_id –∏ expiration_time
    user = await get_user(tg_id)
    existing_config_id = None
    existing_exp_str    = None

    if user:
        existing_config_id = user.get("config_id")         # config_id –∏–ª–∏ None
        existing_exp_str    = user.get("expiration_time")  # —Å—Ç—Ä–æ–∫–∞ —Å datetimestamp

    try:
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –µ—â—ë –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º —Å –∏–º–µ–Ω–µ–º=—Å—Ç—Ä–æ–∫–∞ telegram_id
        if not existing_config_id:
            create_resp = api_session.request(
                method="POST",
                endpoint="wireguard/client/",
                json={"name": str(tg_id)}
            )
            if create_resp.status_code != 200:
                logger.error(f"API create error: {create_resp.text}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ name=str(tg_id)
            list_resp = api_session.request(method="GET", endpoint="wireguard/client/")
            if list_resp.status_code != 200:
                logger.error(f"API list error: {list_resp.text}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.")
                return

            configs = list_resp.json()
            config_entry = next(
                (c for c in configs if c["name"] == str(tg_id)), None
            )
            if not config_entry:
                await message.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            paid_config_id = config_entry["id"]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π config_id
            await save_config_id(tg_id, paid_config_id)

        else:
            # –ï—Å–ª–∏ config_id —É–∂–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            paid_config_id = existing_config_id

        # 2) –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª .conf
        file_resp = api_session.request(
            method="GET",
            endpoint=f"wireguard/client/{paid_config_id}/configuration"
        )
        if file_resp.status_code != 200:
            logger.error(f"API config file error: {file_resp.text}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return

        config_file = BufferedInputFile(
            file=file_resp.content,
            filename=f"{tg_id}.conf"
        )
        await message.answer_document(config_file)

        # 3) –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ expiration_time
        now = datetime.utcnow()
        if existing_exp_str:
            try:
                old_exp = datetime.strptime(existing_exp_str, "%Y-%m-%d %H:%M:%S")
            except Exception:
                old_exp = None
        else:
            old_exp = None

        if old_exp and old_exp > now:
            new_exp = old_exp + timedelta(hours=hours)
        else:
            new_exp = now + timedelta(hours=hours)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –ë–î
        await set_expiration_time(tg_id, new_exp)

        # 4) –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π (–µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–∫–∞—è –ª–æ–≥–∏–∫–∞)
        await enable_config(tg_id)

        # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await message.answer(
            f"‚úÖ –í–∞—à –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ *{new_exp.strftime('%Y-%m-%d %H:%M:%S')}* UTC.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_successful_payment: {e}")
        await message.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
